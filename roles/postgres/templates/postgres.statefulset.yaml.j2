# Postgres StatefulSet.
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: '{{ ansible_operator_meta.name }}-postgres'
  namespace: '{{ ansible_operator_meta.namespace }}'
  labels:
    app.kubernetes.io/name: 'postgres-{{ supported_pg_version }}'
    app.kubernetes.io/instance: '{{ postgres_label_selector }}'
    app.kubernetes.io/component: 'database'
    app.kubernetes.io/part-of: '{{ ansible_operator_meta.name }}'
    app.kubernetes.io/managed-by: 'eda-operator'
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: 'postgres-{{ supported_pg_version }}'
      app.kubernetes.io/instance: '{{ postgres_label_selector }}'
      app.kubernetes.io/component: 'database'
      app.kubernetes.io/managed-by: 'eda-operator'
  serviceName: '{{ ansible_operator_meta.name }}'
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: 'postgres-{{ supported_pg_version }}'
        app.kubernetes.io/instance: '{{ postgres_label_selector }}'
        app.kubernetes.io/component: 'database'
        app.kubernetes.io/part-of: '{{ ansible_operator_meta.name }}'
        app.kubernetes.io/managed-by: 'eda-operator' 
    spec:
      securityContext:
        allowPrivilegeEscalation: false
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
        capabilities:
          drop: ["ALL"]
{% if postgres_priority_class is defined %}
      priorityClassName: '{{ postgres_priority_class }}'
{% endif %}
      containers:
        - image: '{{ _postgres_image }}'
          imagePullPolicy: '{{ image_pull_policy }}'
          name: postgres
{% if postgres_extra_args %}
          args: {{ postgres_extra_args }}
{% endif %}
          env:
            # For postgres_image based on rhel8/postgresql-13
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: '{{ __postgres_configuration_secret }}'
                  key: database
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: '{{ __postgres_configuration_secret }}'
                  key: username
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: '{{ __postgres_configuration_secret }}'
                  key: password

            # For postgres_image based on postgres
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: '{{ __postgres_configuration_secret }}'
                  key: database
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: '{{ __postgres_configuration_secret }}'
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: '{{ __postgres_configuration_secret }}'
                  key: password
            - name: PGDATA
              value: '{{ postgres_data_path }}'
            - name: POSTGRES_INITDB_ARGS
              value: '{{ postgres_initdb_args }}'
            - name: POSTGRES_HOST_AUTH_METHOD
              value: '{{ postgres_host_auth_method }}'
          ports:
            - containerPort: {{ awx_postgres_port | default('5432')}}
              name: postgres-{{ supported_pg_version }}
          volumeMounts:
            - name: postgres-{{ supported_pg_version }}
              mountPath: '{{ postgres_data_path | dirname }}'
              subPath: '{{ postgres_data_path | dirname | basename }}'
          resources: {{ postgres_resource_requirements }}
{% if postgres_selector %}
      nodeSelector:
        {{ postgres_selector | indent(width=8) }}
{% endif %}
{% if postgres_tolerations %}
      tolerations:
        {{ postgres_tolerations | indent(width=8) }}
{% endif %}
  volumeClaimTemplates:
    - metadata:
        name: postgres-{{ supported_pg_version }}
      spec:
        accessModes:
          - ReadWriteOnce
{% if postgres_storage_class is defined %}
        storageClassName: '{{ postgres_storage_class }}'
{% endif %}
        resources: {{ postgres_storage_requirements }}
