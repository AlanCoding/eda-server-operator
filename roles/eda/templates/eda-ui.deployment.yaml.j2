---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ ansible_operator_meta.name }}-ui"
  namespace: "{{ ansible_operator_meta.namespace }}"
  labels:
    {{ lookup("template", "../common/templates/labels/common.yaml.j2")  | indent(width=4) | trim }}
    {{ lookup("template", "../common/templates/labels/version.yaml.j2") | indent(width=4) | trim }}
    app.kubernetes.io/component: '{{ deployment_type }}-ui'
spec:
  replicas: {{ combined_ui.replicas }}
{% if combined_ui.strategy is defined %}
  strategy:
    type: {{ combined_ui.strategy.type }}
{% if combined_ui.strategy.type == "Recreate" %}
    rollingUpdate: null
{% elif combined_ui.strategy.type == "RollingUpdate" %}
    rollingUpdate:
      maxSurge:  {{ combined_ui.strategy.rollingUpdate.maxSurge | default("25%")}}
      maxUnavailable: {{ combined_ui.strategy.rollingUpdate.maxUnavailable | default("25%")}}
{% endif %}
{% endif %}
  selector:
    matchLabels:
      app.kubernetes.io/name: '{{ ansible_operator_meta.name }}'
      app.kubernetes.io/managed-by: '{{ deployment_type }}-operator'
      app.kubernetes.io/component: '{{ deployment_type }}-ui'
  template:
    metadata:
      labels:
        {{ lookup("template", "../common/templates/labels/common.yaml.j2")  | indent(width=8) | trim }}
        {{ lookup("template", "../common/templates/labels/version.yaml.j2") | indent(width=8) | trim }}
        app.kubernetes.io/component: '{{ deployment_type }}-ui'
    spec:
{% if combined_ui.node_selector is defined %}
      nodeSelector:
        {{ combined_ui.node_selector | indent(width=8) }}
{% endif %}
{% if combined_ui.tolerations is defined %}
      tolerations:
        {{ combined_ui.tolerations | indent(width=8) }}
{% endif %}
{% if combined_ui.topology_spread_constraints is defined %} %}
      topologySpreadConstraints:
        {{ combined_ui.topology_spread_constraints | indent(width=8) }}
{% endif %}
      containers:
      - name: eda-ui
        image: {{ _ui_image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        ports:
        - containerPort: 8080
{% if combined_ui.resource_requirements is defined %}
        resources: {{ combined_ui.resource_requirements }}
{% endif %}
        volumeMounts:
          - name: {{ ansible_operator_meta.name }}-nginx-conf
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
            readOnly: true
      volumes:
        - name: {{ ansible_operator_meta.name }}-nginx-conf
          configMap:
            name: '{{ ansible_operator_meta.name }}-{{ deployment_type }}-configmap'
            items:
              - key: nginx_conf
                path: nginx.conf
